---
- name: "{{ 'Deploying' if action=='create' else 'Removing' }} Workload"
  hosts: localhost
  connection: local
  tasks:
  - name: "Including cluster variables..."
    include_vars: "{{ item }}"
    loop:
      - "{{ my_vars_dir | mandatory }}/my_vars.yml"

  - name: "Including secrets and workload variables..."
    include_vars: "{{ item }}"
    loop:
      - "../secret.yml"

  - name: "Registering bastion host"
    add_host:
      groups: remote
      hostname: "bastion.{{ guid }}{{ subdomain_base_suffix }}"

  - block:
    - name: "Checking connection with cluster"
      shell: "oc status"
      register: oc_status
      ignore_errors: yes
    - name: "Copying local Kubeconfig to bastion [4.x]"
      copy:
        src: "{{ output_dir }}/{{ env_type }}_{{ guid }}_kubeconfig"
        dest: "/home/ec2-user/.kube/config"
      when: ocp_version == '4' and oc_status.rc != 0
    - name: "Logging in [3.x]"
      shell: "oc login -u {{ admin_user  | default('opentlc-mgr') }} -p {{ admin_password | default('r3dh4t1!') }} https://master.{{ guid }}{{ subdomain_base_suffix }} --config /home/ec2-user/.kube/config --insecure-skip-tls-verify=true"
      when: ocp_version == '3' and oc_status.rc != 0
    vars:
      ansible_ssh_private_key_file: "{{ output_dir }}/{{ guid }}key"
      ansible_user: ec2-user
    delegate_to: "bastion.{{ guid }}{{ subdomain_base_suffix }}"

- hosts: remote
  remote_user: "{{ remote_user|d('ec2-user') }}"
  tasks:
  - name: "Including cluster variables..."
    include_vars: "{{ item }}"
    loop:
      - "{{ my_vars_dir | mandatory }}/my_vars.yml"
      - "{{ my_vars_dir }}/ocp{{ ocp_version }}_vars.yml"

  - name: "Including secrets and workload variables..."
    include_vars: "{{ item }}"
    loop:
      - "../secret.yml"
      - "./workload_vars/{{ workload }}.yml"

  - block:
    - name: "Checking if workload exists..."
      stat:
        path: "{{ agnosticd_home }}/ansible/roles/ocp-workload-{{ workload }}"
      register: workload_exists
    - set_fact:
        workload_name: "ocp-workload-{{ workload }}"
      when: workload_exists.stat.exists
    - set_fact:
        workload_name: "ocp4-workload-{{ workload }}"
      when: not workload_exists.stat.exists or ocp_version == '4'
    - name: "Checking if workload exists [4.x]..."
      stat:
        path: "{{ agnosticd_home }}/ansible/roles/{{ workload_name }}"
      register: workload_exists
    - fail:
        msg: "Workload does not exist..."
      when: not workload_exists.stat.exists
    delegate_to: localhost

  - include_role:
      name: "{{ workload_name }}"
    vars:
      ACTION: "{{ action }}"
      ansible_ssh_private_key_file: "{{ output_dir }}/{{ guid }}key"
      ansible_user: ec2-user
      playbook_dir: "{{ agnosticd_home }}"
      hosts: remote
      ansible_python_interpreter: "/opt/virtualenvs/k8s/bin/python"
